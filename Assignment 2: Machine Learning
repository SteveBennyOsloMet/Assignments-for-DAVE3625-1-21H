{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "88a45e3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assignment 2: Machine Learning\n",
    "\n",
    "# USE-CASE 1 CHOSEN. \n",
    "# Regression-algorithm has been chosen for this assignment.\n",
    "\n",
    "# Predict stock market price for TESLA. \n",
    "# Make a prediction algorithm which predicts the price of this stock on a specific date. \n",
    "# Input will be date and output should be price of that stock (close value in the data file). \n",
    "# You should also show the prediction percentage score. Data file: TESLA.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "85389cdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# The study â€œStudy of Machine learning Algorithms for Stock Market Prediction\" made by A. Pathak comes to the conclusion that Regression algorithms are a simple but effective tool to use when predicting stocks. \n",
    "# His thesis concludes that regression is far from the best tool. \n",
    "# But based on my knowledge of ML, I chose to use regressions. As I later observe, there are perhaps more effective ways to use regressions. \n",
    "# Among other things, one could use ARMA models for a more correct result.\n",
    "\n",
    "\n",
    "# URL for the thesis: https://tinyurl.com/43fnxcut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6ee08c23",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import modules: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "42f16903",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn import preprocessing\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e5bb4f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import dataset / .csv:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d3f0f775",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Adj Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-26</td>\n",
       "      <td>411.630005</td>\n",
       "      <td>425.760010</td>\n",
       "      <td>410.000000</td>\n",
       "      <td>420.279999</td>\n",
       "      <td>420.279999</td>\n",
       "      <td>28239200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-27</td>\n",
       "      <td>423.760010</td>\n",
       "      <td>430.500000</td>\n",
       "      <td>420.100006</td>\n",
       "      <td>424.679993</td>\n",
       "      <td>424.679993</td>\n",
       "      <td>22686500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-28</td>\n",
       "      <td>416.480011</td>\n",
       "      <td>418.600006</td>\n",
       "      <td>406.000000</td>\n",
       "      <td>406.019989</td>\n",
       "      <td>406.019989</td>\n",
       "      <td>25451400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-29</td>\n",
       "      <td>409.959991</td>\n",
       "      <td>418.059998</td>\n",
       "      <td>406.459991</td>\n",
       "      <td>410.829987</td>\n",
       "      <td>410.829987</td>\n",
       "      <td>22655300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-30</td>\n",
       "      <td>406.899994</td>\n",
       "      <td>407.589996</td>\n",
       "      <td>379.109985</td>\n",
       "      <td>388.040009</td>\n",
       "      <td>388.040009</td>\n",
       "      <td>42511300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date        Open        High         Low       Close   Adj Close  \\\n",
       "0  2020-10-26  411.630005  425.760010  410.000000  420.279999  420.279999   \n",
       "1  2020-10-27  423.760010  430.500000  420.100006  424.679993  424.679993   \n",
       "2  2020-10-28  416.480011  418.600006  406.000000  406.019989  406.019989   \n",
       "3  2020-10-29  409.959991  418.059998  406.459991  410.829987  410.829987   \n",
       "4  2020-10-30  406.899994  407.589996  379.109985  388.040009  388.040009   \n",
       "\n",
       "     Volume  \n",
       "0  28239200  \n",
       "1  22686500  \n",
       "2  25451400  \n",
       "3  22655300  \n",
       "4  42511300  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"TSLA.csv\")\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8720eb35",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Changing the date-format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "552b5fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Date'] = pd.to_datetime(df.Date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f7541446",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding the total amount of columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "20c1ec92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(252, 7)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "09e779b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing/Dropping/Hiding the dummie: \"Adj Close\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1d9457cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('Adj Close',axis =1, inplace= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fc0a9f00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Open</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Close</th>\n",
       "      <th>Volume</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2020-10-26</td>\n",
       "      <td>411.630005</td>\n",
       "      <td>425.760010</td>\n",
       "      <td>410.000000</td>\n",
       "      <td>420.279999</td>\n",
       "      <td>28239200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2020-10-27</td>\n",
       "      <td>423.760010</td>\n",
       "      <td>430.500000</td>\n",
       "      <td>420.100006</td>\n",
       "      <td>424.679993</td>\n",
       "      <td>22686500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2020-10-28</td>\n",
       "      <td>416.480011</td>\n",
       "      <td>418.600006</td>\n",
       "      <td>406.000000</td>\n",
       "      <td>406.019989</td>\n",
       "      <td>25451400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2020-10-29</td>\n",
       "      <td>409.959991</td>\n",
       "      <td>418.059998</td>\n",
       "      <td>406.459991</td>\n",
       "      <td>410.829987</td>\n",
       "      <td>22655300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2020-10-30</td>\n",
       "      <td>406.899994</td>\n",
       "      <td>407.589996</td>\n",
       "      <td>379.109985</td>\n",
       "      <td>388.040009</td>\n",
       "      <td>42511300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date        Open        High         Low       Close    Volume\n",
       "0 2020-10-26  411.630005  425.760010  410.000000  420.279999  28239200\n",
       "1 2020-10-27  423.760010  430.500000  420.100006  424.679993  22686500\n",
       "2 2020-10-28  416.480011  418.600006  406.000000  406.019989  25451400\n",
       "3 2020-10-29  409.959991  418.059998  406.459991  410.829987  22655300\n",
       "4 2020-10-30  406.899994  407.589996  379.109985  388.040009  42511300"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "40fd65f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking the dataset for null-values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4204893b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Date      0\n",
       "Open      0\n",
       "High      0\n",
       "Low       0\n",
       "Close     0\n",
       "Volume    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d66a6372",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We got no unexpected null-values in our dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "afabf34a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding information about our dataset\n",
    "# Finding the number of entries, columns etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "547febbb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 252 entries, 0 to 251\n",
      "Data columns (total 6 columns):\n",
      " #   Column  Non-Null Count  Dtype         \n",
      "---  ------  --------------  -----         \n",
      " 0   Date    252 non-null    datetime64[ns]\n",
      " 1   Open    252 non-null    float64       \n",
      " 2   High    252 non-null    float64       \n",
      " 3   Low     252 non-null    float64       \n",
      " 4   Close   252 non-null    float64       \n",
      " 5   Volume  252 non-null    int64         \n",
      "dtypes: datetime64[ns](1), float64(4), int64(1)\n",
      "memory usage: 11.9 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f15ddaa3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Close'].plot(figsize=(16,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1d52b16d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exctract \"Close\" and \"Open, High, Low & Volume\" from the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9a50ed65",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df[['Open', 'High', 'Low', 'Volume']]\n",
    "y = df['Close']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "31c8f1dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#test_size = 0.25 tell the function that 25% of values should be put in test arrat\n",
    "#Random state is a variable that seeds the random generator. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "503ee1b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train,x_test, y_train, y_test = train_test_split(x, y, test_size= 0.25, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "54321726",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create object for the class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b1e8aa7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3cb8c203",
   "metadata": {},
   "outputs": [],
   "source": [
    "# perform linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d4d3c6a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e1a5c996",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "af626d35",
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_pred = lr.predict(x_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "21a73a32",
   "metadata": {},
   "outputs": [],
   "source": [
    "predicted = lr.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "167b777e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE = 63.52211619076644\n"
     ]
    }
   ],
   "source": [
    "Y_pred = lr.predict(x_test)  # Predict the model on X_test\n",
    "plt.scatter(y_test, predicted)\n",
    "plt.plot(y_test, predicted, color='red')\n",
    "plt.show()\n",
    "\n",
    "print( \"MSE = \"+str(metrics.mean_squared_error(y_test,predicted)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e2e2aa7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Result: The MSE-value is high which means the the error might be high in our model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3bec6e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Printing r2-score:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "6e4dd85d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R2 score = 0.9953847609693713\n"
     ]
    }
   ],
   "source": [
    "print(\"R2 score = \"+str(metrics.r2_score(y_test,predicted)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "214534f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Result: R2 score of 100 means that the two variables are perfectly correlated.\n",
    "# A score of 99 % is high, and might indicate that the model might be valid, but not in all cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b515c9e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# printing out the expected values: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c6613f21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Open        High         Low    Volume\n",
      "158  612.229980  625.489990  609.179993  20424000\n",
      "83   726.150024  737.210022  670.580017  39023900\n",
      "170  679.770020  692.809998  678.140015  18924900\n",
      "101  675.770020  677.799988  657.510010  30491900\n",
      "150  620.130005  623.359985  599.140015  23302800\n",
      "..          ...         ...         ...       ...\n",
      "116  770.700012  780.789978  728.030029  49017400\n",
      "61   855.000000  900.400024  838.820007  41173400\n",
      "124  741.000000  749.299988  732.609985  31038500\n",
      "52   849.400024  854.429993  803.619995  59301600\n",
      "66   814.289978  842.000000  795.559998  25391400\n",
      "\n",
      "[84 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "print(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "d4e7528e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# printing out the trained values: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "81f12434",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           Open        High         Low    Volume\n",
      "26   556.440002  571.539978  541.210022  47775700\n",
      "231  773.119995  799.000000  769.309998  28070700\n",
      "154  623.010010  623.090027  595.500000  26053400\n",
      "224  752.830017  758.909973  747.609985  13923400\n",
      "40   648.000000  649.880005  614.229980  51716000\n",
      "..          ...         ...         ...       ...\n",
      "67   844.679993  880.500000  842.200012  24346200\n",
      "192  700.000000  726.940002  698.400024  33615800\n",
      "117  743.099976  743.690002  721.309998  27848900\n",
      "47   719.460022  744.489990  717.190002  48638200\n",
      "172  678.979980  700.000000  673.260010  27054500\n",
      "\n",
      "[168 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "print(x_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "babdeccb",
   "metadata": {},
   "outputs": [],
   "source": [
    "dframe=pd.DataFrame(y_test,predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "43cd119c",
   "metadata": {},
   "outputs": [],
   "source": [
    "dfr=pd.DataFrame({'ActualClose':y_test,'PredictedClose':predicted})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8e989cce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# printing out ActualClose and Predicted close as dfr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9b19c15b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     ActualClose  PredictedClose\n",
      "158   617.690002      620.184592\n",
      "83    682.219971      693.399901\n",
      "170   679.700012      688.784963\n",
      "101   662.159973      663.525315\n",
      "150   605.119995      605.350792\n",
      "..           ...             ...\n",
      "116   732.229980      749.238889\n",
      "61    880.799988      885.015858\n",
      "124   738.200012      742.604031\n",
      "52    811.190002      822.988250\n",
      "66    839.809998      824.101793\n",
      "\n",
      "[84 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "print(dfr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "02bba293",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix, accuracy_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "b4db1725",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9953847609693713"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(x_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b3a8477",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Testing if we might have overfitted our model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2a135740",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "64302bb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error:  63.52211619076644\n",
      "Coefficient of determination: 1.00\n"
     ]
    }
   ],
   "source": [
    "test_prediction = lr.predict(x_test)\n",
    "print('Mean Squared Error: ', mean_squared_error(y_true=y_test, y_pred=test_prediction))\n",
    "print('Coefficient of determination: %.2f'\n",
    "      % r2_score(y_true=y_test, y_pred=test_prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "3be8cf47",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using this cross-validation, the result it indicates that we might have overfitted our model. \n",
    "# For future reference: Use ARMA-models because it might be better when using linear regression on a time series model (Date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "5c5d33ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "graph=dfr.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c18790c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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viE3NcF5553H6aefzl//+leWL1/OT3/600pnoDSzbKpRuEv6nqRlkpZKmiGpWFIzSU9Leiv5fUje9jdIWiVphaT+dVd+4Zx66qmsWrWK+fPnc8YZZzB8+HA6d+5MeXk5P/jBD+jZsyddunThV7/6FZAL2HHjxtGxY0cGDhzIBx98ULGv008/ne0f2nryySfp3r07X//61+nbty9r1qxhypQp3HbbbXTt2pUXXnihyul6N2zYQL9+/ejWrRuXX355xXwz8+bNo6ioiLFjx1Ycs2vXrpx66qk7/E+bN2/m4osvpnPnznTr1o158+YBsGzZMnr16kXXrl3p0qULb731FgAPPPBARfvll1++1w9uZlb3qu2WkdQG+C7QMSI+lTQLGAZ0BOZGxERJ44HxwA8ldUzWdwJaA89I6hARDTYJtm7dyhNPPMGAAQMAWLBgAUuXLqV9+/ZMnTqVgw8+mIULF7JlyxZOOeUU+vXrx+LFi1mxYgVvvPEG69evp2PHjrtMIVBWVsZll13G888/T/v27SumDx47dixNmzatmIt9+PDhlU7X++Mf/5jevXtz44038vjjjzN16lSgZlMGA0yePBmAN954gzfffJN+/fqxcuVKpkyZwtVXX823vvUtPvvsM8rLyykpKeGhhx7ixRdfpKioiCuuuIIHH3yQESNG1OapNrNaUtM+98bA/pI+Bw4A3gNuAE5P1k8H5gM/BAYDMyNiC7Ba0iqgF/Dn2iu7MD799FO6du0K5J65X3rppbz00kv06tWrYqrep556itdff53Zs2cDuYnB3nrrLZ5//nkuuugiGjVqROvWrSud4fHll1+mT58+Ffuqavrgqqbrff7553n44YcBGDhwIIccckill6/Kn/70J6666iogNxHZkUceycqVKznppJOYMGECpaWlDBkyhKOPPpq5c+fy6quv0rNnz4pz06pVqz06npkVTrXhHhF/k/QzYC3wKfBURDwl6dCIWJdss07S9nt6G+DlvF2UJm07kDQGGANwxBFH7Nt/UUe297nv7MADD6xYjgjuuOMO+vffsffpj3/8Y7VTA2+fFKw6u5uut7LLd+rUqeLBprrjV2b48OGccMIJPP744/Tv359p06YREYwcOZKbb7652v2aWf2rts896UsfDLQn181yoKRv7+4ilbTtkiIRMTUiekREj5YtW9a03tTp378/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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "graph.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0bfc2c6b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
